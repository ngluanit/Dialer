apply plugin: 'com.android.application'
apply plugin: 'realm-android' // Realm needs to be before Kotlin or the build will fail
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    flavorDimensions "analytics"
    applicationVariants.all { variant ->
        variant.getRuntimeConfiguration().exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    defaultConfig {
        applicationId "com.android.dialer"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 71
        versionName "7.1"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        withAnalytics { dimension "analytics" }
        noAnalytics { dimension "analytics" }
    }
    viewBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
configurations {
    noAnalyticsDebug
    noAnalyticsRelease
    withAnalyticsDebug
    withAnalyticsRelease
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'androidx.appcompat:appcompat:1.1.0'
    compile project(':com.android.phone.common')
    compile project(':com.android.contacts.common')
    compile 'androidx.cardview:cardview:1.0.0'
    compile 'androidx.recyclerview:recyclerview:1.1.0'
    compile 'com.google.android.material:material:1.1.0'
    compile 'androidx.legacy:legacy-support-v13:1.0.0'
    compile 'com.umeng.analytics:analytics:latest.integration'
    // lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // androidx
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraintlayout_version"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.emoji:emoji-appcompat:$androidx_emoji_version"
    implementation "androidx.viewpager2:viewpager2:$androidx_viewpager_version"
    implementation "com.google.android.material:material:$material_version"

    // conductor
    implementation "com.bluelinelabs:conductor:$conductor_version"
    implementation "com.bluelinelabs:conductor-archlifecycle:$conductor_version"

    // glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // exoplayer
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    implementation("com.google.android.exoplayer:exoplayer-ui:$exoplayer_version", {
        exclude group: "com.android.support", module: "support-media-compat"
    })

    // rxbinding
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rxbinding_version"

    // autodispose
    implementation "com.uber.autodispose:autodispose-android-archcomponents:$autodispose_version"
    implementation "com.uber.autodispose:autodispose-android-archcomponents-test:$autodispose_version"
    implementation "com.uber.autodispose:autodispose-android:$autodispose_version"
    implementation "com.uber.autodispose:autodispose:$autodispose_version"
    implementation "com.uber.autodispose:autodispose-lifecycle:$autodispose_version"

    // dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    compileOnly "javax.annotation:jsr250-api:1.0"

    // ezvcard
    implementation('com.googlecode.ez-vcard:ez-vcard:0.10.4', {
        exclude group: "org.jsoup", module: "jsoup"
        exclude group: "org.freemarker", module: "freemarker"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    })

    // realm
    implementation("io.realm:android-adapters:$realm_adapters_version") { transitive = false }
    kapt "io.realm:realm-annotations:$realm_version"
    kapt "io.realm:realm-annotations-processor:$realm_version"

    // rxjava
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    implementation "com.uber.rxdogtag:rxdogtag:$rxdogtag_version"
    implementation "com.uber.rxdogtag:rxdogtag-autodispose:$rxdogtag_version"


    // testing
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    testImplementation "androidx.test:runner:$androidx_testrunner_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"

    // moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    debugImplementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kaptRelease "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$coroutines_version"

    implementation "com.android.billingclient:billing:1.0"
    implementation "com.github.chrisbanes:PhotoView:2.1.4"
    implementation "com.f2prateek.rx.preferences2:rx-preferences:$rx_preferences_version"
    implementation "com.google.android:flexbox:0.3.1"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "me.leolin:ShortcutBadger:1.1.22"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(":android-smsmms")
    implementation project(":common")
    implementation project(':data')
    implementation project(':domain')

    withAnalyticsImplementation 'com.google.firebase:firebase-core:18.0.0'
    withAnalyticsImplementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    noAnalyticsDebug project(path: ':data', configuration: 'noAnalyticsDebug')
    noAnalyticsRelease project(path: ':data', configuration: 'noAnalyticsRelease')
    withAnalyticsDebug project(path: ':data', configuration: 'withAnalyticsDebug')
    withAnalyticsRelease project(path: ':data', configuration: 'withAnalyticsRelease')
}
if (getGradle().getStartParameter().getTaskRequests().toString().contains("WithAnalytics")) {
    apply plugin: 'io.fabric'
    apply plugin: 'com.google.gms.google-services'
}
